# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  clive:
    env_file: .env
    volumes:
      - /path/to/db_and_logs_folder:/config
    # environment:
    #   NODE_ENV: production
    #   LOG_LEVEL: error
    #   DISCORD_WEBHOOK_URL: https://discordapp.com/api/webhooks/YOUR_DISCORD/WEBHOOK_URL_HERE
    #   TWITCH_CHANNELS: "a_twitch_channel another_twitch_channel"
    #   TWITCH_CLIENT_ID: <twitch_client_id>
    #   TWITCH_CLIENT_SECRET: <twitch_client_secret>
    #   RESTRICT_CHANNELS: true
    #   MODS_ONLY: false
    #   SUBS_ONLY: false
    #   BROADCASTER_ONLY: false
    #   RICH_EMBED: true
    #   URL_AVATAR: http://i.imgur.com/9s3TBNv.png
    #   BOT_USERNAME: "Clive"


# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:


